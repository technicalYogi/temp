# @configure_input@                                     -*- shell-script -*-
# atlocal.in for CoFlo's ./tests directory, used to collect configure-time
# information about the build system.
#
# Copyright 2011 Gary R. Van Sickle (grvs@users.sourceforge.net).
#
# This file is part of CoFlo.
#
# CoFlo is free software: you can redistribute it and/or modify it under the
# terms of version 3 of the GNU General Public License as published by the Free
# Software Foundation.
#
# CoFlo is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# CoFlo.  If not, see <http://www.gnu.org/licenses/>.

## Process this file with autoconf to produce atlocal.

# TODO Not sure if we need something like this or not.
PATH=@abs_builddir@:@abs_top_builddir@/src:@abs_top_srcdir@/build-aux:$top_srcdir:$srcdir:$PATH

XFAILFILE=$abs_builddir/.badversion

trap "test -r $XFAILFILE && cat $XFAILFILE; exit $?" 1 2 13 15

# The minimum version of GCC which CoFlo needs to run.
MIN_GCC_VERSION="4.0.0";

GCCS_FOUND_AT_CONFIGURE_TIME=@GCCS_FOUND_AT_CONFIGURE_TIME@

GCCS_FOUND_AT_TESTSUITE_RUN_TIME=

echo "Getting a list of gcc installations...";
#todo This is duplicated in ./tests/testsuite.at, should figure out a way to make this a single definition.
MAX_GCCS_TO_TEST=16;

# Get the paths to gcc's.
GCC_PATH_ARRAY=($(find /usr/bin -regextype posix-extended -iregex '.*-.*-.*-gcc-.*(\.exe)?$' -or -iregex '.*/gcc(\.exe)?$'));
NUM_GCCS_FOUND=${#GCC_PATH_ARRAY[*]};
for (( i=0; $i<${NUM_GCCS_FOUND}; i++ )); do
	# Get the version string from the compiler.
	GCC_VERSION_STRING_LINE_ARRAY[$i]="$("${GCC_PATH_ARRAY[$i]}" --version | head -n 1)";
	# Now get just the "X.Y.Z" version.
	GCC_VERSION_STRING_ARRAY[$i]="$("${GCC_PATH_ARRAY[$i]}" -dumpversion)";
	# Report what we've found.
	echo "Found the following gcc binary: ${GCC_PATH_ARRAY[$i]}";
	echo "  Version: ${GCC_VERSION_STRING_ARRAY[$i]}";
	echo "  Version string: ${GCC_VERSION_STRING_LINE_ARRAY[$i]}";
done;
# Initialize the remaining GCC path slots to "NONE" so the skipped test message looks better.
for (( ; $i<${MAX_GCCS_TO_TEST}; i++ )); do
	GCC_PATH_ARRAY[$i]="NONE";
done;
